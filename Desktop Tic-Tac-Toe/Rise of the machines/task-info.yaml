type: edu
files:
- name: src/tictactoe/ApplicationRunner.java
  visible: true
  text: |
    package tictactoe;

    public class ApplicationRunner {
        public static void main(String[] args) {
            new TicTacToe();
        }
    }
  learner_created: false
- name: src/tictactoe/TicTacToe.java
  visible: true
  text: |-
    package tictactoe;

    import javax.swing.*;

    public class TicTacToe extends JFrame {
        public TicTacToe() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
            setLayout(null);
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import tictactoe.TicTacToe;

    import javax.swing.JButton;
    import java.text.MessageFormat;
    import java.text.StringCharacterIterator;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Stream;

    import static java.util.stream.IntStream.range;
    import static org.hyperskill.hstest.testcase.CheckResult.correct;

    public class TicTacToeTest extends SwingTest {
        private static final String EMPTY_CELL = " ";
        private static final String MARK_X = "X";
        private static final String MARK_O = "O";
        private static final Map<String, String> GAME_STATE = Map.of(
                "E", "Game is not started",
                "P", "Game in progress",
                "X", "X wins",
                "O", "O wins",
                "D", "Draw");

        public TicTacToeTest() {
            super(new TicTacToe());
        }

        @SwingComponent
        private JButtonFixture buttonA1;
        @SwingComponent
        private JButtonFixture buttonA2;
        @SwingComponent
        private JButtonFixture buttonA3;
        @SwingComponent
        private JButtonFixture buttonB1;
        @SwingComponent
        private JButtonFixture buttonB2;
        @SwingComponent
        private JButtonFixture buttonB3;
        @SwingComponent
        private JButtonFixture buttonC1;
        @SwingComponent
        private JButtonFixture buttonC2;
        @SwingComponent
        private JButtonFixture buttonC3;
        @SwingComponent
        private JButtonFixture buttonStartReset;
        @SwingComponent
        private JButtonFixture buttonPlayer1;
        @SwingComponent
        private JButtonFixture buttonPlayer2;
        @SwingComponent
        private JLabelFixture labelStatus;

        private Stream<JButtonFixture> cells() {
            return Stream.of(
                    buttonA3, buttonB3, buttonC3,
                    buttonA2, buttonB2, buttonC2,
                    buttonA1, buttonB1, buttonC1
            );
        }

        private Map<String, JButtonFixture> board;

        private final List<JButton> buttons = new ArrayList<>();

        @DynamicTest(feedback = "Cells should be visible")
        CheckResult test1() {
            cells().forEach(this::requireVisible);
            cells().map(JButtonFixture::target).forEach(buttons::add);
            board = Map.of(
                    "A3", buttonA3, "B3", buttonB3, "C3", buttonC3,
                    "A2", buttonA2, "B2", buttonB2, "C2", buttonC2,
                    "A1", buttonA1, "B1", buttonB1, "C1", buttonC1,
                    "SR", buttonStartReset);
            return correct();
        }

        @DynamicTest(feedback = "Cells should be disabled before the start of the game")
        CheckResult test2() {
            cells().forEach(this::requireDisabled);
            return correct();
        }

        @DynamicTest(feedback = "All cells should be empty before the game")
        CheckResult test3() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            return correct();
        }

        private int[] cols;
        private int[] rows;

        @DynamicTest(feedback = "The board should have exactly three rows and columns")
        CheckResult test4() {
            cols = buttons.stream().mapToInt(JButton::getX).distinct().sorted().toArray();
            rows = buttons.stream().mapToInt(JButton::getY).distinct().sorted().toArray();

            assertEquals(3, cols.length,
                    "The board should have exactly 3 columns. "
                            + "The column coordinates are {0}, "
                            + "the buttons have {1} different column coordinates",
                    Arrays.toString(cols), cols.length);

            assertEquals(3, rows.length,
                    "The board should have exactly 3 rows. "
                            + "The row coordinates are {0}, "
                            + "The buttons have {0} different row coordinates",
                    Arrays.toString(rows), rows.length);

            return correct();
        }

        private static final String[] ROW_NAME = new String[]{"top", "middle", "bottom"};
        private static final String[] COL_NAME = new String[]{"left", "middle", "right"};

        @DynamicTest(feedback = "The buttons are incorrectly placed on the board")
        CheckResult test5() {
            range(0, 9).forEach(index -> {

                assertEquals(rows[index / 3], buttons.get(index).getY(),
                        "The button {0} should be located in the {1} row",
                        buttons.get(index).getText(), ROW_NAME[index / 3]);

                assertEquals(cols[index % 3], buttons.get(index).getX(),
                        "The button {0} should be located in the {1} column",
                        buttons.get(index).getText(), COL_NAME[index % 3]);
            });

            return correct();
        }

        @DynamicTest(feedback = "Add a JLabel with the name of 'LabelStatus' as status bar")
        CheckResult test6() {
            labelStatus.requireVisible();
            return correct();
        }

        @DynamicTest(feedback = "The status bar should contain the following text: 'Game is not started' before the game")
        CheckResult test7() {
            labelStatus.requireText(GAME_STATE.get("E"));
            return correct();
        }

        @DynamicTest(feedback = "Add a JButton with the name of 'ButtonStartReset' and enable it")
        CheckResult test8() {
            buttonStartReset.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'ButtonStartReset' component should have the following text: 'Start' after the program starts")
        CheckResult test9() {
            buttonStartReset.requireText("Start");
            return correct();
        }

        @DynamicTest(feedback = "After a click, 'Start' should be changed to 'Reset'")
        CheckResult test10() {
            buttonStartReset.click();
            buttonStartReset.requireText("Reset");
            return correct();
        }

        @DynamicTest(feedback = "Cells should be enabled after the game started")
        CheckResult test12() {
            cells().forEach(this::requireEnabled);
            return correct();
        }

        @DynamicTest(feedback = "After the game has started, display the 'Game in progress' status")
        CheckResult test13() {
            labelStatus.requireText(GAME_STATE.get("P"));
            return correct();
        }

        @DynamicTest(feedback = "Disable player buttons after the start of the game")
        CheckResult test14() {
            buttonPlayer1.requireDisabled();
            buttonPlayer2.requireDisabled();
            return correct();
        }

        @DynamicTest(feedback = "The first player should be 'X', the second â€” 'O'")
        CheckResult test15() {
            buttonA1.click();
            buttonA1.requireText(MARK_X);
            buttonA3.click();
            buttonA3.requireText(MARK_O);
            return correct();
        }

        @DynamicTest(feedback = "Enable player buttons after the game is over or the 'Reset' button is pressed" +
                "Enable player buttons")
        CheckResult test16() {
            buttonStartReset.click();
            buttonPlayer1.requireEnabled();
            buttonPlayer2.requireEnabled();
            return correct();
        }

        @DynamicTest(feedback = "The 'Reset' button should clear the board" +
                " and status should indicate 'Game is not started'")
        CheckResult test18() {
            cells().forEach(cell -> cell.requireText(EMPTY_CELL));
            labelStatus.requireText(GAME_STATE.get("E"));
            return correct();
        }

        private final String[][] humanVsHuman = new String[][]{
                {"SR", "_________", "P"},
                {"A1", "______X__", "P"}, {"B1", "______XO_", "P"},
                {"C3", "__X___XO_", "P"}, {"B3", "_OX___XO_", "P"},
                {"B2", "_OX_X_XO_", "X"}, {"SR", "_________", "E"},

                {"SR", "_________", "P"},
                {"B2", "____X____", "P"}, {"A1", "____X_O__", "P"},
                {"C1", "____X_O_X", "P"}, {"A3", "O___X_O_X", "P"},
                {"A2", "O__XX_O_X", "P"}, {"C2", "O__XXOO_X", "P"},
                {"B3", "OX_XXOO_X", "P"}, {"B1", "OX_XXOOOX", "P"},
                {"C3", "OXXXXOOOX", "D"}, {"B2", "OXXXXOOOX", "D"},
                {"B2", "OXXXXOOOX", "D"}, {"SR", "_________", "E"},

                {"SR", "_________", "P"},
                {"A2", "___X_____", "P"}, {"B2", "___XO____", "P"},
                {"A1", "___XO_X__", "P"}, {"A3", "O__XO_X__", "P"},
                {"C1", "O__XO_X_X", "P"}, {"B1", "O__XO_XOX", "P"},
                {"C2", "O__XOXXOX", "P"}, {"B3", "OO_XOXXOX", "O"},
                {"A3", "OO_XOXXOX", "O"}, {"C3", "OO_XOXXOX", "O"},
                {"C3", "OO_XOXXOX", "O"}, {"B2", "OO_XOXXOX", "O"},
                {"SR", "_________", "E"}, {"SR", "_________", "P"},
                {"SR", "_________", "E"}, {"SR", "_________", "P"},

                {"C1", "________X", "P"}, {"B1", "_______OX", "P"},
                {"B2", "____X__OX", "P"}, {"C2", "____XO_OX", "P"},
                {"A3", "X___XO_OX", "X"}, {"B3", "X___XO_OX", "X"},
                {"C3", "X___XO_OX", "X"}, {"A1", "X___XO_OX", "X"},
                {"A1", "X___XO_OX", "X"}, {"SR", "_________", "E"},
        };

        @DynamicTest(data = "humanVsHuman", feedback = "Incorrect game status")
        CheckResult test20(final String cell, final String position, final String state) {
            board.get(cell).click();
            labelStatus.requireText(GAME_STATE.get(state));
            final var iter = new StringCharacterIterator(" " + position.replace('_', ' '));
            cells().forEach(c -> c.requireText(String.valueOf(iter.next())));
            return correct();
        }


        @DynamicTest(feedback = "The player buttons should be Human vs Human")
        CheckResult test30() {
            buttonPlayer1.requireText("Human");
            buttonPlayer2.requireText("Human");
            return correct();
        }

        @DynamicTest(feedback = "The player buttons should switch Human/Robot")
        CheckResult test40() {
            buttonPlayer1.click();
            buttonPlayer1.requireText("Robot");
            buttonPlayer1.click();
            buttonPlayer1.requireText("Human");

            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Human");
            buttonPlayer2.click();
            buttonPlayer2.requireText("Robot");
            return correct();
        }


        private static void assertEquals(
                final Object expected,
                final Object actual,
                final String error,
                final Object... args) {

            if (!expected.equals(actual)) {
                final var feedback = MessageFormat.format(error, args);
                throw new WrongAnswer(feedback);
            }
        }
    }
  learner_created: false
- name: src/tictactoe/Board.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionListener;
    import java.util.LinkedHashSet;

    public class Board extends JPanel {
        GridLayout boardLayout = new GridLayout(3, 3);

        BoardStatus boardStatus = BoardStatus.NOT_STARTED;

        //buttons
        final LinkedHashSet<JButton> buttonList = new LinkedHashSet<>(); //list of buttons
        final JButton buttonA1 = new BoardCell("ButtonA1", this);
        final JButton buttonA2 = new BoardCell("ButtonA2", this);
        final JButton buttonA3 = new BoardCell("ButtonA3", this);
        final JButton buttonB1 = new BoardCell("ButtonB1", this);
        final JButton buttonB2 = new BoardCell("ButtonB2", this);
        final JButton buttonB3 = new BoardCell("ButtonB3", this);
        final JButton buttonC1 = new BoardCell("ButtonC1", this);
        final JButton buttonC2 = new BoardCell("ButtonC2", this);
        final JButton buttonC3 = new BoardCell("ButtonC3", this);

        //add buttons to buttonList
        {
            buttonList.add(buttonA3);
            buttonList.add(buttonB3);
            buttonList.add(buttonC3);
            buttonList.add(buttonA2);
            buttonList.add(buttonB2);
            buttonList.add(buttonC2);
            buttonList.add(buttonA1);
            buttonList.add(buttonB1);
            buttonList.add(buttonC1);
        }


        BoardGrid boardGrid = new BoardGrid(this);
        StatusBar statusBar;
        final GridStatusChecker gridStatusChecker = new GridStatusChecker(this);

        final ActionListener buttonA3Listener = e -> {
            int row = getCellRow(buttonA3);
            int column = getCellColumn(buttonA3);

            if (buttonA3.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonA3.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonA2Listener = e -> {
            int row = getCellRow(buttonA2);
            int column = getCellColumn(buttonA2);

            if (buttonA2.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonA2.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonA1Listener = e -> {
            int row = getCellRow(buttonA1);
            int column = getCellColumn(buttonA1);

            if (buttonA1.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonA1.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonB3Listener = e -> {
            int row = getCellRow(buttonB3);
            int column = getCellColumn(buttonB3);

            if (buttonB3.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonB3.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonB2Listener = e -> {
            int row = getCellRow(buttonB2);
            int column = getCellColumn(buttonB2);

            if (buttonB2.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonB2.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonB1Listener = e -> {
            int row = getCellRow(buttonB1);
            int column = getCellColumn(buttonB1);

            if (buttonB1.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonB1.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonC3Listener = e -> {
            int row = getCellRow(buttonC3);
            int column = getCellColumn(buttonC3);

            if (buttonC3.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonC3.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonC2Listener = e -> {
            int row = getCellRow(buttonC2);
            int column = getCellColumn(buttonC2);

            if (buttonC2.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonC2.setText(String.valueOf(XO));
            }
        };
        final ActionListener buttonC1Listener = e -> {
            int row = getCellRow(buttonC1);
            int column = getCellColumn(buttonC1);

            if (buttonC1.getText().equals(" ")) {
                char XO = ' ';
                switch (getBoardStatus()) {
                    case X_TURN:
                    case NOT_STARTED:
                        XO = 'X';
                        break;
                    case O_TURN:
                        XO = 'O';
                        break;
                }
                boardGrid.setGrid(row, column, XO);
                statusBar.updateLabelStatus();
                buttonC1.setText(String.valueOf(XO));
            }
        };

        public Board(String name, StatusBar statusBar) {
            this.statusBar = statusBar;
            setName(name);
            setLayout(boardLayout);
            addButtons();
        }

        private void addButtons() {
            add(buttonA3);
            add(buttonB3);
            add(buttonC3);
            add(buttonA2);
            add(buttonB2);
            add(buttonC2);
            add(buttonA1);
            add(buttonB1);
            add(buttonC1);

            buttonA3.addActionListener(buttonA3Listener);
            buttonA2.addActionListener(buttonA2Listener);
            buttonA1.addActionListener(buttonA1Listener);
            buttonB3.addActionListener(buttonB3Listener);
            buttonB2.addActionListener(buttonB2Listener);
            buttonB1.addActionListener(buttonB1Listener);
            buttonC3.addActionListener(buttonC3Listener);
            buttonC2.addActionListener(buttonC2Listener);
            buttonC1.addActionListener(buttonC1Listener);
        }

        public void resetCells() {
            buttonList.forEach(b -> b.setText(" "));
            boardGrid = new BoardGrid(this);
            setBoardStatus(BoardStatus.NOT_STARTED);
        }

        public BoardStatus getBoardStatus() {
            return gridStatusChecker.checkGridStatus();
        }

        public LinkedHashSet<JButton> getButtonList() {
            return buttonList;
        }

        public void setBoardStatus(BoardStatus boardStatus) {
            this.boardStatus = boardStatus;
        }

        private int getCellRow(JButton cell) {
            int ret = -1;
            String name = cell.getName();
            switch (name.charAt(name.length() - 1)) {
                case '3':
                    ret = 0;
                    break;
                case '2':
                    ret = 1;
                    break;
                case '1':
                    ret = 2;
                    break;
            }
            return ret;
        }

        private int getCellColumn(JButton cell) {
            int ret = -1;
            String name = cell.getName();
            switch (name.charAt(name.length() - 2)) {
                case 'A':
                    ret = 0;
                    break;
                case 'B':
                    ret = 1;
                    break;
                case 'C':
                    ret = 2;
                    break;
            }
            ;
            return ret;
        }
    }
  learner_created: true
- name: src/tictactoe/BoardCell.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;

    public class BoardCell extends JButton {
        Board board;
        int row;
        int column;


        public BoardCell(String name, Board board) {
            super(" ");
            this.board = board;
            setName(name);

            setFont(new Font("", Font.BOLD, 100));
            setFocusPainted(false);
        }

    }
  learner_created: true
- name: src/tictactoe/BoardGrid.java
  visible: true
  text: |-
    package tictactoe;

    import javax.swing.*;
    import java.util.Iterator;

    public class BoardGrid {
        final Board board;

        private char[][] grid = new char[3][3];
        char[] diagonal1 = new char[3];
        char[] diagonal2 = new char[3];
        private final char[][] rotatedGrid = new char[3][3];
        private char[][] sides;


        BoardGrid(Board board) {
            this.board = board;
            Iterator<JButton> cellsIterator = board.getButtonList().iterator();

            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (cellsIterator.hasNext()) {
                        grid[i][j] = cellsIterator.next().getText().charAt(0);
                    }
                }
            }
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }

        public void setGrid(int row, int column, char XO) {
            grid[row][column] = XO;
            setRotatedGrid();
            setDiagonal1();
            setDiagonal2();
            setSides();
        }

        public char[][] getGrid() {
            return grid;
        }

        void setRotatedGrid() {
            for (int i = 0; i < 3; i++) {
                for (int k = 0; k < 3; k++) {
                    rotatedGrid[i][k] = grid[k][i];
                }
            }
        }

        void setDiagonal1() {
            for (int i = 0; i < 3; i++) {
                diagonal1[i] = grid[i][i];
            }
        }

        void setDiagonal2() {
            diagonal2[0] = grid[0][2];
            diagonal2[1] = grid[1][1];
            diagonal2[2] = grid[2][0];
        }

        public void setSides() {
            sides = new char[][]{grid[0], grid[1], grid[2], rotatedGrid[0], rotatedGrid[1], rotatedGrid[2],
                    diagonal1, diagonal2};
        }

        public char[][] getSides() {
            return sides;
        }
    }
  learner_created: true
- name: src/tictactoe/BoardStatus.java
  visible: true
  text: |
    package tictactoe;

    public enum BoardStatus {
        NOT_STARTED,
        X_TURN,
        O_TURN,
        X_WINS,
        O_WINS,
        DRAW;
    }
  learner_created: true
- name: src/tictactoe/GridStatusChecker.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Arrays;

    public class GridStatusChecker {
        final Board board;

        public GridStatusChecker(Board board) {
            this.board = board;
        }

        BoardStatus checkGridStatus() {
            BoardStatus boardStatus = BoardStatus.NOT_STARTED;
            int X = 0;
            int O = 0;
            int empty = 0;
            for (char[] row : board.boardGrid.getGrid()) {
                for (char ch : row) {
                    if (ch == 'X') {
                        X++;
                    } else if (ch == 'O') {
                        O++;
                    } else if (ch == ' ') {
                        empty++;
                    }
                }
            }

            switch (checkSides()) {
                case "X_WINS":
                    boardStatus = BoardStatus.X_WINS;
                    break;
                case "O_WINS":
                    boardStatus = BoardStatus.O_WINS;
                    break;
                default:
                    if (empty == 0) {
                        boardStatus = BoardStatus.DRAW;
                    } else if (empty > 0) {
                        if (X <= O && empty != 9) {
                            boardStatus = BoardStatus.X_TURN;
                        } else if (O < X && empty != 9) {
                            boardStatus = BoardStatus.O_TURN;
                        }
                    }
                    break;
            }
            return boardStatus;
        }

        //return simple array representing fulfilled side with special case (X, O)
        char[] simplifySides() {
            char[][] side = board.boardGrid.getSides();
            char[] simplifiedSides = new char[board.boardGrid.getSides().length];
            Arrays.fill(simplifiedSides, 'f');
            for (int i = 0; i < side.length; i++) {
                char last = side[i][0];
                boolean isInRow = true;
                for (int j = 1; j < 3; j++) {
                    if (side[i][j] == last) {
                        last = side[i][j];
                    } else {
                        isInRow = false;
                        break;
                    }
                }
                if (isInRow) {
                    simplifiedSides[i] = side[i][0];
                }
            }
            return simplifiedSides;
        }

        String checkSides() {
            String check = "";
            char[] sides;
            sides = simplifySides();
            int X = 0;
            int O = 0;
            for (char side : sides) {
                if (side == 'X') {
                    X++;
                } else if (side == 'O') {
                    O++;
                }
            }
            if (X == 1 && O == 0) {
                check = "X_WINS";
            } else if (O == 1 && X == 0) {
                check = "O_WINS";
            }
            return check;
        }
    }
  learner_created: true
- name: src/tictactoe/StatusBar.java
  visible: true
  text: |
    package tictactoe;

    import javax.swing.*;
    import java.awt.*;
    import java.awt.event.ActionListener;

    public class StatusBar extends JPanel {
        final JLabel labelStatus = new JLabel("Game is not started");
        final JButton buttonReset = new JButton("Reset");
        final BorderLayout borderLayout = new BorderLayout();

        TicTacToe ticTacToe;

        final ActionListener buttonResetActionListener = e -> {
            ticTacToe.board.resetCells();
            updateLabelStatus();
        };

        {
            labelStatus.setName("LabelStatus");
            buttonReset.setName("ButtonReset");
        }

        public StatusBar(String name, TicTacToe ticTacToe) {
            setLayout(borderLayout);
            setName(name);
            this.ticTacToe = ticTacToe;

            add(labelStatus, BorderLayout.WEST);
            add(buttonReset, BorderLayout.EAST);

            buttonReset.addActionListener(buttonResetActionListener);
        }

        void updateLabelStatus() {
            String text = "";
            switch (ticTacToe.board.getBoardStatus()) {
                case NOT_STARTED:
                    text = "Game is not started";
                    break;
                case X_TURN:
                case O_TURN:
                    text = "Game in progress";
                    break;
                case X_WINS:
                    text = "X wins";
                    break;
                case O_WINS:
                    text = "O wins";
                    break;
                case DRAW:
                    text = "Draw";
                    break;
            }
            labelStatus.setText(text);
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12896#comment
status: Unchecked
record: 3
